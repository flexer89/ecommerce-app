apiVersion: apps/v1
kind: Deployment
metadata:
  name: orders-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: orders-db
  template:
    metadata:
      labels:
        app: orders-db
    spec:
      containers:
        - name: orders-db
          image: postgres:16.2-alpine3.19
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: orders-db-secret
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: orders-db-secret
                  key: postgres-password
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: orders-db-secret
                  key: postgres-db
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: init-script
          configMap:
            name: init-sql-configmap-orders

---
apiVersion: v1
kind: Service
metadata:
  name: orders-db
spec:
  selector:
    app: orders-db
  ports:
    - protocol: TCP
      port: 5432
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: init-sql-configmap-orders
data:
  init.sql: |
    -- Drop tables if they already exist
    DROP TABLE IF EXISTS order_items;
    DROP TABLE IF EXISTS orders;
    DROP TYPE IF EXISTS status_enum;

    -- Create enum type for order status
    CREATE TYPE status_enum AS ENUM ('pending', 'processing', 'shipped', 'delivered', 'cancelled', 'on_hold');

    -- Create orders table
    CREATE TABLE orders (
        id SERIAL PRIMARY KEY,
        user_id VARCHAR NOT NULL,
        total_price FLOAT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status status_enum DEFAULT 'pending'
    );

    -- Create order_items table
    CREATE TABLE order_items (
        id SERIAL PRIMARY KEY,
        order_id INTEGER REFERENCES orders(id) ON DELETE CASCADE,
        product_id INTEGER NOT NULL,
        quantity INTEGER NOT NULL,
        price FLOAT NOT NULL,
        weight FLOAT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    CREATE INDEX idx_order_items_order_id ON order_items (order_id);
    CREATE INDEX idx_order_items_user_id ON orders (user_id);
    CREATE INDEX idx_order_items_product_id ON order_items (product_id);
